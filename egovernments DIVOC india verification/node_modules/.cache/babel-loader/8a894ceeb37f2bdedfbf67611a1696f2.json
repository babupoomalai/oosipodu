{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMemoryGrowTimestamp = exports.getInstance = void 0;\n\nconst load_1 = require(\"./load\");\n\nlet inst = null;\nlet HEAP32 = new Int32Array();\n\nconst clock_gettime = (clk_id, tp) => {\n  const now = Date.now();\n  HEAP32[tp >> 2] = now / 1e3 | 0;\n  HEAP32[tp + 4 >> 2] = now % 1e3 * 1e3 * 1e3 | 0;\n  return 0;\n};\n\nlet lastGrowTimestamp = 0;\n\nconst emscripten_notify_memory_growth = idx => {\n  if (lastGrowTimestamp) {\n    console.info('zbar.wasm: Memory Grow: ', inst.memory.buffer.byteLength);\n  }\n\n  lastGrowTimestamp = Date.now();\n  HEAP32 = new Int32Array(inst.memory.buffer);\n};\n\nconst importObj = {\n  env: {\n    clock_gettime,\n    emscripten_notify_memory_growth\n  }\n};\n\nlet instPromise = (async () => {\n  const res = await load_1.loadWasmInstance(importObj);\n\n  if (!res) {\n    throw Error('WASM was not loaded');\n  }\n\n  inst = res.exports;\n  emscripten_notify_memory_growth(0);\n  return inst;\n})();\n\nexports.getInstance = async () => {\n  return await instPromise;\n};\n\nexports.getMemoryGrowTimestamp = () => {\n  return lastGrowTimestamp;\n};","map":{"version":3,"sources":["../src/instance.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAGA,IAAI,IAAI,GAAgB,IAAxB;AACA,IAAI,MAAM,GAAG,IAAI,UAAJ,EAAb;;AAEA,MAAM,aAAa,GAAG,CAAC,MAAD,EAAiB,EAAjB,KAAuC;AAC3D,QAAM,GAAG,GAAG,IAAI,CAAC,GAAL,EAAZ;AACA,EAAA,MAAM,CAAC,EAAE,IAAI,CAAP,CAAN,GAAmB,GAAG,GAAG,GAAP,GAAc,CAAhC;AACA,EAAA,MAAM,CAAE,EAAE,GAAG,CAAN,IAAY,CAAb,CAAN,GAA0B,GAAG,GAAG,GAAP,GAAc,GAAd,GAAoB,GAArB,GAA4B,CAApD;AACA,SAAO,CAAP;AACD,CALD;;AAOA,IAAI,iBAAiB,GAAG,CAAxB;;AACA,MAAM,+BAA+B,GAAI,GAAD,IAAgB;AACtD,MAAI,iBAAJ,EAAuB;AACrB,IAAA,OAAO,CAAC,IAAR,CAAa,0BAAb,EAAyC,IAAK,CAAC,MAAN,CAAa,MAAb,CAAoB,UAA7D;AACD;;AACD,EAAA,iBAAiB,GAAG,IAAI,CAAC,GAAL,EAApB;AACA,EAAA,MAAM,GAAG,IAAI,UAAJ,CAAe,IAAK,CAAC,MAAN,CAAa,MAA5B,CAAT;AACD,CAND;;AAQA,MAAM,SAAS,GAAG;AAChB,EAAA,GAAG,EAAE;AACH,IAAA,aADG;AAEH,IAAA;AAFG;AADW,CAAlB;;AAOA,IAAI,WAAW,GAAG,CAAC,YAAW;AAC5B,QAAM,GAAG,GAAG,MAAM,MAAA,CAAA,gBAAA,CAAiB,SAAjB,CAAlB;;AACA,MAAI,CAAC,GAAL,EAAU;AACR,UAAM,KAAK,CAAC,qBAAD,CAAX;AACD;;AACD,EAAA,IAAI,GAAG,GAAG,CAAC,OAAX;AACA,EAAA,+BAA+B,CAAC,CAAD,CAA/B;AACA,SAAO,IAAP;AACD,CARiB,GAAlB;;AAUa,OAAA,CAAA,WAAA,GAAc,YAA0B;AACnD,SAAO,MAAM,WAAb;AACD,CAFY;;AAIA,OAAA,CAAA,sBAAA,GAAyB,MAAa;AACjD,SAAO,iBAAP;AACD,CAFY","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getMemoryGrowTimestamp = exports.getInstance = void 0;\nconst load_1 = require(\"./load\");\nlet inst = null;\nlet HEAP32 = new Int32Array();\nconst clock_gettime = (clk_id, tp) => {\n    const now = Date.now();\n    HEAP32[tp >> 2] = (now / 1e3) | 0;\n    HEAP32[(tp + 4) >> 2] = ((now % 1e3) * 1e3 * 1e3) | 0;\n    return 0;\n};\nlet lastGrowTimestamp = 0;\nconst emscripten_notify_memory_growth = (idx) => {\n    if (lastGrowTimestamp) {\n        console.info('zbar.wasm: Memory Grow: ', inst.memory.buffer.byteLength);\n    }\n    lastGrowTimestamp = Date.now();\n    HEAP32 = new Int32Array(inst.memory.buffer);\n};\nconst importObj = {\n    env: {\n        clock_gettime,\n        emscripten_notify_memory_growth\n    }\n};\nlet instPromise = (async () => {\n    const res = await load_1.loadWasmInstance(importObj);\n    if (!res) {\n        throw Error('WASM was not loaded');\n    }\n    inst = res.exports;\n    emscripten_notify_memory_growth(0);\n    return inst;\n})();\nexports.getInstance = async () => {\n    return await instPromise;\n};\nexports.getMemoryGrowTimestamp = () => {\n    return lastGrowTimestamp;\n};\n//# sourceMappingURL=instance.js.map"]},"metadata":{},"sourceType":"script"}